*ulti_test_utility.txt*        Unit Testing Plugin for Vim

Author:             Kevin Biskar
License:            MIT, see LICENSE for more info
Website:            https://github.com/biskark/vim-ultimate-test-utility
Contact:            biskark@gmail.com
Version:            0.0.0


==============================================================================
Ultimate_test_utility            *Ultimate-Test-Utility* 

1. Introduction                       |Ultimate-Test-Utility-Intro|

2. Features and Requirements          |Ultimate-Test-Utility-Features|

3. Usage                              |Ultimate-Test-Utility-Usage|

   a. Quick Start Guide               |Ultimate-Test-Utility-Quick-Start|
   b. Basic Examples                  |Ultimate-Test-Utility-Basic-Examples|
   c. Extended Examples               |Ultimate-Test-Utility-Extended-Examples|

4. Functions                          |Ultimate-Test-Utility-Functions|

   a. Framework Functions
      1. UltiTestStart                |UltiTestStart|
      2. UltiTestStop                 |UltiTestStop|
      3. UltiTestReport               |UltiTestReport|
      4. UltiTestReset                |UltiTestReset|
      5. UltiTestResetAll             |UltiTestResetAll|
      6. UltiTestFinalSummary         |UltiTestFinalSummary|

   b. Basic Assertion Functions
      1. UltiAssertTrue               |UltiAssertTrue|
      2. UltiAssertEquals             |UltiAssertEquals|
      3. UltiAssertEmpty              |UltiAssertEmpty|
      4. UltiAssertInString           |UltiAssertInString|
      5. UltiAssertInBuffer           |UltiAssertInBuffer|
      6. UltiAssertInFile             |UltiAssertInFile|

   c. Advanced Assertion Functions
      1. UltiAssertInOutput           |UltiAssertInOutput|
      2. UltiAssertException          |UltiAssertException|

   d. Example Functions
      1. UltiTestSelfUnit             |UltiTestSelfUnit|
      2. UltiTestExampleUnit          |UltiTestExampleUnit|

5. Configuration                      |Ultimate-Test-Utility-Config|

==============================================================================
1. Introduction                      *Ultimate-Test-Utility-Intro* 

|Ultimate-Test-Utility| is the only tool you'll need for creating and running
unit tests in Vim. Unit testing has been notoriously hard for Vim-script and
the plugins that do exist often require languages, are difficult to
setup/configure/use, have bugs, or have incomplete documentation.

|Ultimate-Test-Utility| is maintained solely by Kevin Biskar and is constantly
expanding it's features. If you have any concerns, feature requests, or have
found any undocumented bugs, please notify him (me).


==============================================================================
2. Features and Requirements          *Ultimate-Test-Utility-Features* 

- |Ultimate-Test-Utility| is written solely in vimscript so compilation
  requirements are minimal.

    - However, |Ultimate-Test-Utility| must be run in a Vim 7.0 or higher and
      some functions may require read/write access to files you may be using.
      Of course, use those functions with care, though the instances in which
      these precautions are necessary should be obvious; |Ultimate-Test-Utility| 
      does NOT want to harm your work, it's here to help.

    - Also, |Ultimate-Test-Utility| has included some example functions that
      may not work correctly on your OS. This should not be an issue when
      using this plugin to write your own vimscript code, only when trying the
      demos. In the future, these examples may be updated to be compatible with
      as many OSes and setups as possible.

- |Ultimate-Test-Utility| provides several levels of reporting so your reports
  are as detailed or minimal as you'd like.

- |Ultimate-Test-Utility| allows for easy installation through Pathogen, Vundle,
  or other compatible plugin managers. If you're reading this, it's likely
  installed correctly already, but if not consult the README.md file.

- |Ultimate-Test-Utility| is, like most vim plugins, open-source! Please feel
  free to distribute, contribute, modify or spread the word.




==============================================================================
3. Usage                              *Ultimate-Test-Utility-Usage*

|Ultimate-Test-Utility| has a straightforward API, and is not unlike the Perl
testing suite. However, Vim's lack of out-of-box OOP and our decision to
maximize compatibility (we don't use other languages or CLI testing
software) means that |Ultimate-Test-Utility| does have a mild
learning-curve, but should be easy to pick for both testing veterans and
first-timers alike.

The first section, |Ultimate-Test-Utility-Quick-Start|, provides a quick
overview of how to use this plugin.

The second section, |Ultimate-Test-Utility-Basic-Examples|, shows the most
common usage and should be enough to get you started on working on your own
projects.

The third section, |Ultimate-Test-Utility-Basic-Examples|, explores more
complex usage cases and explains the interface to some of the less intuitive
functions.

The more complex examples are available in examples.vim.


------------------------------------------------------------------------------
3a. Quick Start Guide                 *Ultimate-Test-Utility-Quick-Start*

|Ultimate-Test-Utility| breaks down tests into two categories. Individual
Assertion tests (referred to as sub-tests) which check for one specific thing,
and groupings of related sub-tests (collectively referred to as a test).
It's often natural to have sub-tests in a full test address different aspects
and edge cases of a particular function or key mapping. Thus a plugin with 4
functions and 1 keymapping may have 5 total "tests", with each "test"
consisting of up to dozens of "sub-tests."

The basic workflow is simple.
1. You MUST call |UltiTestStart| to tell vim that you are going into
   "test-mode".
2. You then call as many |UltiAssert...| sub-tests as you need.
3. You then call |UltiTestStop| to tell vim that a particular test is over.
4. You may then call |UltiTestReport| which will give a report of varying
   detail about the success and failure of your sub-tests. Additionally, this
   will report the overall success of the entire test. The degree of detail
   reported is dependent on the value of |g:ulti_test_verbose|. See
   |Ultimate-Test-Utility-Config| for more details.
5. If you wish to execute more tests (ie. more groupds of sub-tests), you
   should call |UltiTestReset|.
6. Repeat steps 1-6 as needed.
7. You may then call |UltiTestFinalSummary| to give a simple summary of all
   the "tests" you have run (since you either loaded the plugin or called
   |UltiTestResetAll|, see next step for details).
8. If you wish to run another suite of "tests", say for a different plugin or
   file, call |UltiTestResetAll|.
9. Repeat steps 1-8 as needed.

The next section shows how to setup and run one full "test" on an example
function.

------------------------------------------------------------------------------
3b. Basic Examples                    *Ultimate-Test-Utility-Basic-Examples*

Special Note: It's good practice to write your tests before you write the code
you're testing, but for the purpose of this tutorial, we'll ignore that.

Example Multiply function, takes two arguments and returns the quotient. >

    function! Multiply(numerator, denominator)
        return a:numerator * a:denominator
    endfunction

Example test function that examines some basic-use cases and possible edge
cases. Comments have been sprinkled in to explain a little of the API. >
    
    function! MultiplyTestOne()
        call UltiTestStart()

        call UltiAssertTrue('', Multiply(2, 2) == 4, 'true')

        call UltiAssertTrue("Testing 1 times 1 isn't 6",
                    \ Multiply(1, 1) == 6,
                    \ 'false')

        " We're deliberately making an incorrect test here to see what happens
        call UltiAssertTrue("Testing 5 times -2 isn't -10",
                    \ Multiply(5, -2) == -10,
                    \ 'false')

        call UltiAssertEquals('Testing Multiply(2.0, 3) == Multiply(3.0, 2)',
                    \ Multiply(2.0, 3),
                    \ Multiply(3.0, 2),
                    \ 'true')

        call UltiTestStop()
        call UltiTestReport()
    endfunction

    " Now to run the test
    call MultiplyTestOne()

This should give something like the following as output: >

    Sub-test 3: Failed, Testing 5 times -2 isn't -10
    Test 1 Results:
        Expected: Not specified, Passed: 3, Failed: 1, Skipped: 0

Yay, it works, let's review what we did.

The calls to |UltiTestStart|, |UltiTestStop|, and |UltiTestReport| were covered in
the previous section and are straightforward. However, we then called the
actual sub-tests themselves.

Each sub-test available starts with 'UltiAssert'.
Each UltiAssert function has a slightly different argument signature but there
are some similarities in usage.
1. The first argument is a string describing the purpose of the test. Notice
   this message was displayed when sub-test 3 failed. Descriptive messages
   make pin-pointing problems quick, but you may provide an empty string like
   we did for the first sub-test.
2. Next are the arguments unique to the assertion test being run.
3. The last argument is optional, and can only be the string 'skip' to
   indicate that you don't want to run the test at this time. Notice that we
   did not use this feature in any of the tests we just ran.
4. The argument before 'skip' (aka the last argument if you don't
   provide 'skip'), must be either 'true' or 'false', indicating if
   the Assertion is expected to be true or false.

Essentially, each simple |UltiAssert...| looks like this... >
    call UltiAssertSimple(description, ..., expected_outcome)  " or
    call UltiAssertSimple(description, ..., expected_outcome, 'skip')
where the '...' is unique to whatever test you're using.

Note: there is no test called |UltiAssertSimple| or |UltiAssert...|. These are
place holder names.

Notice that in MultiplyTestOne we used |UltiAssertTrue|, which took one unique
argument (the result of the Multiply function call) and |UltiAssertEquals| which
took two unique arguments (the results of two Multiply function calls). As you
may have guessed, |UltiAssertTrue| simply evaluates the truthiness of its one
unique argument, and |UltiAssertEquals| compares its two unique arguments to
eachother.  Most sub-tests can be written with either one of these. The
presence of both of them, and the more specific assertions explained in the
next section, is merely a convenience. You should use whichever sub-tests feel
the most natural.

Next Steps:
Yay, it works ... but it could be better. Ignoring that our function is
trivial, we deliberately made a mistake, and the usefulness of these tests is
questionable, we can still improve our test function.

1. If we run our test again, it now says we're on Test 2 even though this
   is the same test we just ran.

2. 'Test 1' isn't a horribly informative name in the first place.

3. Though moot in this case, how do we know we tested everything we
   intended? Though careful coding can eliminate this problem, in tests with
   many sub-tests, especially in more complicated plugins, we may want an
   extra level of confidence.

It turns out we can fix all of these problems with minimal effort. >


    function! MultiplyTestTwo()
        call UltiTestReset()
        call UltiTestStart('Testing the Multiply Function', 4)

        call UltiAssertTrue('', Multiply(2, 2) == 4, 'true')

        call UltiAssertTrue("Testing 1 times 1 isn't 6",
                    \ Multiply(1, 1) == 6,
                    \ 'false')

        " We're deliberately making an incorrect test here to see what happens
        call UltiAssertTrue("Testing 5 times -2 isn't -10",
                    \ Multiply(5, -2) == -10,
                    \ 'false')

        call UltiAssertEquals('Testing Multiply(2.0, 3) == Multiply(3.0, 2)',
                    \ Multiply(2.0, 3),
                    \ Multiply(3.0, 2),
                    \ 'true',
                    \ 'skip')

        call UltiTestStop()
        call UltiTestReport()
    endfunction

    " Now to run the test
    call MultiplyTestOne()

This should give something like the following as output: >

    Sub-test 3: Failed, Testing 5 times -2 isn't -10
    Test 1 'Testing the Multiply Function' Results:
        Expected: 4, Passed: 2, Failed: 1, Skipped: 1

Two quick points, and we can move on to more advanced usage.

1. The call to |UltiTestReset| tells vim to reset our sub-test counters so
   that we could have been placed at the end of the function instead of the
   beginning. However, as we'll see, this call should usually be made outside
   of any one test, and rather after or before running a suite of tests.

2. The call to |UltiTestStart| can take two optional arguments in any order.
   It can take a string that should describe how the sub-tests are related,
   and an integer that tells the test how many sub-tests to expect.

3. The last sub-test has the 'skip' argument added, just to show how to use
   it. Note that adding 'skip' only prevents the result from being factored in
   the testing facility, it won't prevent any errors in the other arguments
   from causing problems.


------------------------------------------------------------------------------
3c. Extended Examples                 *Ultimate-Test-Utility-Extended-Examples*

Let's broaden our look at this plugin be testing some more complicated
plugins/functions and integrating several tests into one suite. Assume all
references to MultiplyTest() refer to the MultiplyTestTwo() function from the
previous section.

Special Note: It's good practice to write your tests before you write the code
you're testing, but for the purpose of this tutorial, we'll ignore that.

First let's write two more functions and add a keymapping for one of them.

The first is a slightly trickier function that echos the quotient of two
numbers rather than merely returns them. Also, divide by zero exceptions may
be thrown and we'll show how to deal with that. >

    function! Divide(numerator, denominator)
        if a:denominator == 0
            throw "Divide by zero"
        endif
        echo (a:numerator / a:denominator)
    endfunction

The next is a vim function that inserts the word "Hello" into the current
buffer. For convenience, we'll also add a helper function that adds a
keymapping for this function. >

    function! InsertHello()
        execute 'normal! iHello'
    endfunction

    function! NewMapping()
        nnoremap <silent> <leader>S :call InsertHello()<cr>
    endfunction


Ok, now let's write those tests. >

    function! TestDivide()
        call UltiTestStart("Divide Tests", 5)
        
        " Output tests
        call UltiAssertInOutput('6 / 2 == 3', 'Divide', [6, 2], '3', 'true')
        call UltiAssertInOutput("1 / 3 == 0 ('Testing Int Division')",
                    \ 'Divide', [1, 3], '6', 'false')

        " Exception tests
        call UltiAssertException("Throws divide by zero error",
                    \ 'Divide by zero', 'Divide', [4, 0], 'true')
        call UltiAssertException("Doesn't throw divide by zero error",
                    \ 'Divide by zero', 'Divide', [4, 2], 'false')
        " For variety, use a variable for the function name
        let l:fx = 'Divide'
        call UltiAssertException("Complains about arguments",
                    \ 'Not enough arguments', l:fx, [], 'true')

        call UltiTestStop()
        call UltiTestReport()
    endfunction

Notes:
|UltiAssertInOuput| and |UltiAssertException| both have more complicated
interfaces but share similarities with the previous |UltiAssert| functions
and with each other.

1. Like the others, the first argument is a descriptive name, and the last
   two arguments are the expection (either "true" or "false") and an
   optional "skip" string to indicate the test is skipped.
2. The second argument is a variable or raw string with the name of the
   function to be tested. The name should NOT have parentheses or any
   arguments.
3. The third argument is a List of all arguments you would like to be
   passed to the function you're testing. If no arguments are to be passed,
   you must provide an empty list '[]'.
4. The fourth argument is a string or regex specific to the |UltiAssert| test
   you're using. For |UltiAsserException|, it should be the exception you
   expect to be thrown. For |UltiAssertInOutput| it should be the string
   you expect to be in the output.

In summary, each simple |UltiAssert...| looks like this... >
    call UltiAssertSimple(desc, ..., expected_outcome)  " or
    call UltiAssertSimple(desc, ..., expected_outcome, 'skip')
where the '...' is unique to whatever test you're using.

Each complex |UltiAssert...| looks like this. >
    call UltiAssertComplex(desc, fx, arguments, string, expected_outcome)  " or
    call UltiAssertComplex(desc, fx, arguments, string, expected_outcome, 'skip')

Note: there is no test called |UltiAssertSimple| or |UltiAssert...| or
|UltiAssertComplex|. These are place holder names only.


This next test is a bit of a cheat in that it tests the InsertHello() function
via the keymapping where these tests should probably be separate. Also, the
use of the mapleader variable can be troublesome because the mapping is always
whatever the value of the leader key at the time it was set. If this doesn't
make sense to you, just know to be careful if you use it. >

    function! TestInsertHello()
        call UltiTestStart('Testing Command Mapping and Text Insertion', 3)

        if exists('mapleader')
            let leader = mapleader
        else
            let leader = '\'
        endif

        " Make the new mapping
        call NewMapping()

        let l:fx = 'Hello'
        call UltiAssertInBuffer('Testing for "Hello" absence before execute',
                    \ 'Hello', 'false')

        execute 'normal! ' . leader . 'S'
        call UltiAssertInBuffer('Testing for "Hello" absence after normal!',
                    \ 'Hello', 'false')

        execute 'normal ' . leader . 'S'
        call UltiAssertInBuffer('Testing for "Hello World" presence after normal',
                    \ 'Hello', 'true')
        
        " Clean up the text that was just inserted. Not necessary for the
        " test though.
        execute "s/Hello//"

        call UltiTestStop()
        call UltiTestReport()
    endfunction

Notes
1. We specified there should be 3 sub-tests run and given the test a
   description.
2. We have not called |UltiTestReset| yet.
3. Now that we're executing more complicated functions, we need
   to be careful that we're not polluting the current buffer with side-effects
   from our testing. In particular beware of testing |UltiAssertInBuffer|
   sub-tests in the buffer where you wrote the test. See if you can figure out
   why.
4. |UltiAssertInBuffer| has an almost identical interface to |UltiAssertTrue|.


Finally, let's organize these two tests into a full suite with the
MultiplyTest from before. Take out the call to |UltiTestReset| in the
MultiplyTest. >

    function! AllTests()
        call UltiTestReset()         " Clears residual junk

        call MultiplyTest()
        call TestDivide()
        call TestInsertHello()

        call UltiTestFinalSummary()  " Brief summary of all three tests
        call UltiTestResetAll()      " Clears everything
    endfunction

Now to call the whole thing... >

    call AllTests()

Remember that because our TestInsertHello() tests for the presence and absence
of the string 'Hello' in the buffer it's executed in, it's best to run these
tests in an empty buffer. So it's probably best to source these functions,
switch to a new buffer, and then call AllTests().

You can change the output by setting one of these three values before you call
the function. >

    let g:ulti_test_verbose = 0    " or
    let g:ulti_test_verbose = 1    " or
    let g:ulti_test_verbose = 2

Assuming you left it at 1, you should get ... >

    Sub-test 3: Failed, Testing 5 times -2 isn't -10
    Test 1 Results:
        Expected: 4, Passed: 3, Failed: 1, Skipped: 0

    Test 2 'Divide Test' Results
        Expected: 5, Passed: 5, Failed: 0, Skipped: 0

    Test 3 'Testing Command Mapping and Text Insertion' Results
        Expected: 3, Passed: 3, Failed: 0, Skipped: 0

    1 test(s) failed.

That's it for the tutorial, a list of available functions is in the TOC and
detailed description of each one is available below.


==============================================================================
4. Functions                          *Ultimate-Test-Utility-Functions*

A comprehensive list of all the functions provided by |Ultimate-Test-Utility|.
There are additional helper functions available in the autoload folder, but
these are not intended to be used directly and do not have documentation here.
However, these functions are tested and used heavily in this plugin so you may
you use them if you wish.

------------------------------------------------------------------------------
4a. Framework Functions

These are the functions that organize and display the results of
|Ultimate-Test-Utility|. These are very simple and most don't require any
arguments at all. Also, the level of reporting detail given by these functions is
directly related to the setting of |g:ulti_test_verbose|.

See |Ultimate-Test-Utility-Config| for more information.

------------------------------------------------------------------------------
4a.1 UltiTestStart                    *UltiTestStart*

    Usage: >

      call UltiTestStart('message', num_expected_tests)
      call UltiTestStart('message')
      call UltiTestStart(num_expected_tests, 'message')
      call UltiTestStart(num_expected_tests)
      call UltiTestStart()

This function readies |Ultimate-Test-Utility| for performing subtests. You may
provide a descriptive message of what the test is for and an expected number
of sub-tests you will perform. This test will complain if called in the middle
of another set tests. See |UltiTestStop| below for more details.

------------------------------------------------------------------------------
4a.2 UltiTestStop                     *UltiTestStop*

    Usage: >

        call UltiTestStop()

This function takes no arguments and tells |Ultimate-Test-Utility| that a full
test is complete. It will tally up all the passed and failed sub-tests and
ready this information for a call to |UltiTestFinalSummary|.

------------------------------------------------------------------------------
4a.3 UltiTestReport                   *UltiTestReport*

    Usage: >

        call UltiTestReport()

This function takes no arguments and outputs a report of the previously run
test based on the value of |g:ulti_test_verbose|. This function will complain
if it's run before closing a test. IE, you must call |UltiTestStop| before
calling this.

------------------------------------------------------------------------------
4a.4 UltiTestReset                    *UltiTestReset*

    Usage: >

        call UltiTestReset()

This function takes no arguments and resets the subtest counter that
|Ultimate-Test-Utility| uses behind the scene. This function is not strictly
necessary, but handy when running several large tests at once. This function
will complain if it's called before closing a test.

------------------------------------------------------------------------------
4a.5 UltiTestResetAll                 *UltiTestResetAll*
    Usage: >

        call UltiTestResetAll()

This function takes no arguments and resets the subtest and test counters that
|Ultimate-Test-Utility| uses behind the scene. This function is not strictly
necessary, but handy when running tests from multiple files at once in
conjunction with |UltiTestFinalSummary|. This function will complain if it's
called before closing a test.

------------------------------------------------------------------------------
4a.6 UltiTestFinalSummary             *UltiTestFinalSummary*
    Usage: >

        call UltiTestFinalSummary()

This function takes no arguments and reports the a summary of all the
previously run larger tests since the last call to |UltiTestResetAll|. For
large plugins with multiple files it can be tedious to wade through individual
sub-test results. A single coordinating test function that ends with a
call to |UltiTestFinalSummary| (followed by an optional |UltiTestResetAll|)
can be handy to users of your plugin to verify that all the features are
working correctly, without getting bogged down in the details.

    Example: >

        function PluginTest()
            call UltiTestStart()

            .... " Individual UltiAssertTests
            call UltiTestStop()
            call UltiTestReset()
        endfunction

        function! TestMyPlugin()
            let g:ulti_test_verbose = 0

            call PluginTest1()
            call PluginTest2()
            call PluginTest3()
            call PluginTest4()
            call PluginTest5()
            call UltiTestFinalSummary()
        endfunction

        :call TestMyPlugin

------------------------------------------------------------------------------
4b. Basic Assertion Functions

These are the basic building blocks of all good unit tests. While
|UltiAsserTrue| is technically all you'll need, we've provided several
conveniece functions to speed up the testing phase.

All |UltiAssert| functions test using boolean values. 1 is 'true', 0 is
'false' but they don't explicitly return anything.

All basic assertion functions have the same basic interface. >

    call UltiAssert...(desc, ..., expectation, skip)

desc == string description of the sub-test's purpose.

... == one to several arguments specific to the sub-test being run.

expectation == either the string 'true' or 'false' to indicate whether you
    the Assertion to be true or false.

skip == an optional argument that can be nothing, or the string 'skip' to
    indicate you don't wish to evaluate that test currently.

------------------------------------------------------------------------------
4b.1 UltiAssertTrue               *UltiAssertTrue*

Function for testing a value for Vim's definition of truthiness. Note that all
strings evaluate to 0 ("false") which is unlike other languages. For string
"truthiness" |UltiAssertEmpty| is likely the better choice.

    Usage: >

        call UltiAssertTrue(desc, value, expectation, skip)

desc == string description of the sub-test's purpose.

value == the value being tested for truthiness, based on Vim's defintion. It's
    common for some people to put a function call directly in the value slot.

expectation == either the string 'true' or 'false' to indicate whether you
    the Assertion to be true or false.

skip == an optional argument that can be nothing, or the string 'skip' to
    indicate you don't wish to evaluate that test currently.

    Examples: >

        call UltiAssertTrue('1 is true', 1, 'true')
        call UltiAssertTrue('0 isn't true', 1, 'false')
        call UltiAssertTrue('0 is false', 0, 'true')

------------------------------------------------------------------------------
4b.2 UltiAssertEquals             *UltiAssertEquals*

Function for testing a two items for Vim's definition of equivalence. For
string comparisons, uses a case-sensitive definition regardless of what your
vim settings are.

    Usage: >

        call UltiAssertEquals(desc, first, second, expectation, skip)


'desc' == string description of the sub-test's purpose.

'first', second == the two values being compared to each other.

'expectation' == either the string 'true' or 'false' to indicate whether you
    the Assertion to be true or false.

'skip' == an optional argument that can be nothing, or the string 'skip' to
    indicate you don't wish to evaluate that test currently.

    Examples: >

        call UltiAssertTrue('4 divided by 2 is 2', 4 / 2, 2, 'true')
        call UltiAssertTrue('12 divided by 3 isn't 2', 12 / 3, 2, 'false')

------------------------------------------------------------------------------
4b.3 UltiAssertEmpty              *UltiAssertEmpty*

Function for testing an item for Vim's definition of empty. While handy with
lists and dicts, this is also what you likely want to use when testing
strings for the "truthiness" definition used in other languages.

    Usage: >

        call UltiAssertEmpty(desc, item, expectation, skip)


'desc' == string description of the sub-test's purpose.

'item' == an item you want Vim to evaluate as empty or not. 

'expectation' == either the string 'true' or 'false' to indicate whether you
    the Assertion to be true or false.

'skip' == an optional argument that can be nothing, or the string 'skip' to
    indicate you don't wish to evaluate that test currently.

    Examples: >

        call UltiAssertTrue('4 divided by 2 is 2', 4 / 2, 2, 'true')
        call UltiAssertTrue('12 divided by 3 isn't 2', 12 / 3, 2, 'false')

------------------------------------------------------------------------------
4b.4 UltiAssertInString           *UltiAssertInString*

Function for testing the presence of a substring or regex in a given string.
This only tests strings or variables that hold strings. See
|UltiAssertInOutput|, |UltiAssertInBuffer|, and |UltiAssertInFile| for use in
different situations.

    Usage: >

        call UltiAssertInString(desc, pattern, string, expectation, skip)


'desc' == string description of the sub-test's purpose.

'pattern' == a substring or vim regex you wish to search for.

'string' == the string to look in.

'expectation' == either the string 'true' or 'false' to indicate whether you
    the Assertion to be true or false.

'skip' == an optional argument that can be nothing, or the string 'skip' to
    indicate you don't wish to evaluate that test currently.

    Examples: >

        call UltiAssertInString('st in string', 'st', 'string', 'true')
        call UltiAssertInString('ell in hello', '\vel{2}o$', 'hello', 'true')

------------------------------------------------------------------------------
4b.5 UltiAssertInBuffer           *UltiAssertInBuffer*

Function for testing the presence of a substring or regex in the current
buffer. Make sure that the buffer this is run contains the text you think it
does.
See |UltiAssertInOutput|, |UltiAssertInString|, and |UltiAssertInFile| for use in
different situations.

    Usage: >

        call UltiAssertInBuffer(desc, pattern, expectation, skip)


'desc' == string description of the sub-test's purpose.

'pattern' == a substring or vim regex you wish to search for.

'expectation' == either the string 'true' or 'false' to indicate whether you
    the Assertion to be true or false.

'skip' == an optional argument that can be nothing, or the string 'skip' to.
    indicate you don't wish to evaluate that test currently.

    Examples: >

        call UltiAssertInBuffer('This buffer doesn't have 4 x's in a row',
                    \ '\vx{4}', 'false')

------------------------------------------------------------------------------
4b.6 UltiAssertInFile            *UltiAssertInFile*

Function for testing the presence of a substring or regex in the given file.
Make sure that the file exists and you have permission to access it as
|Ultimate-Test-Utility|'s may be undefined if it encounters unforeseen IO
problems.
See |UltiAssertInOutput|, |UltiAssertInString|, and |UltiAssertInBuffer| for use in
different situations.

    Usage: >

        call UltiAssertInFile(desc, filename, pattern, expectation, skip)


'desc' == string description of the sub-test's purpose.

'filename' == the path to the file you wish to search through.

'pattern' == a substring or vim regex you wish to search for.

'expectation' == either the string 'true' or 'false' to indicate whether you
    the Assertion to be true or false.

'skip' == an optional argument that can be nothing, or the string 'skip' to.
    indicate you don't wish to evaluate that test currently.

    Examples: >

        call UltiAssertInBuffer('Make sure README.md has my name in it',
                    \ 'README.md', 'Kevin Biskar', 'true')

------------------------------------------------------------------------------
4c. Advanced Assertion Functions

These functions are also used to execute sub-tests and though they share the
basics with the functions above, they are slightly more complex to use. These
Assertion Tests examine the actual execution of a given function and thus the
Test signature is a little more complex. But, since they share the same basic
structure with eachother, learning them all is not so hard.

Remember, all |UltiAssert| functions test using boolean values. 1 is 'true',
0 is 'false' but they don't explicitly return anything.

|UltiAssertInOutput| and |UltiAssertException| have the same basic interface. >

    call UltiAssert...(desc, fx, argument_list, string, expectation, skip)

desc == string description of the sub-test's purpose.

... == one to several arguments specific to the sub-test being run.

fx == the name of a function you want to run.

argument_list == an explicit List of arguments to pass to the fx when it's
    called. If no arguments are needed, you must still provide an empty list.

string == a string or regex whose function depends on which sub-test you're
    using.

expectation == either the string 'true' or 'false' to indicate whether you
    the Assertion to be true or false.

skip == an optional argument that can be nothing, or the string 'skip' to
    indicate you don't wish to evaluate that test currently.

------------------------------------------------------------------------------
4c.1 UltiAssertInOutput           *UltiAssertInOutput*

Function for testing the presence of a substring or regex in the output of a
function. If you have a key mapping that echos something, you should wrap a
call to it in a function, and test that the function executes the command you
want, and that the command does what you want it to.

See |UltiAssertInFile|, |UltiAssertInString|, and |UltiAssertInBuffer| for use in
different situations.

    Usage: >

        call UltiAssertInOutput(desc, fx, arguments, pattern, expectation, skip)


'desc' == string description of the sub-test's purpose.

'filename' == the path to the file you wish to search through.

'fx' == the string name of the function whose output you are examining. Do not
    include the parentheses.

'arguments' == an explicit list of the arguments you wish to pass to fx. If no
    arguments are needed, you must still supply an empty list.

'pattern' == a substring or vim regex you wish to search for in the output.

'expectation' == either the string 'true' or 'false' to indicate whether you
    the Assertion to be true or false.

'skip' == an optional argument that can be nothing, or the string 'skip' to.
    indicate you don't wish to evaluate that test currently.

    Examples: >

        " Assume HelloPerson() is a function that accepts zero, one or two
        " arguments and echos 'Hello [names]'
        call UltiAssertInOutput('Test for my name in HelloPerson',
                    \ 'HelloPerson', ['Kevin Biskar'], 'Hello, Kevin Biskar', 'true')
        call UltiAssertInOutput('Test that my name isn't in HelloPerson',
                    \ 'HelloPerson', [], 'Hello, Kevin Biskar', 'false')
        call UltiAssertInOutput('Test for two names in HelloPerson',
                    \ 'HelloPerson', ['Kevin', 'Jeff'],
                    \ 'Hello, Kevin and Jeff', 'true')

------------------------------------------------------------------------------
4c.2 UltiAssertException          *UltiAssertException*

Function that tests if a given function throws exceptions when you want it to.
This test can check for a specific exception, or for all exceptions.

Beware, when testing for exceptions, if you don't catch the right exception, the
one actually thrown will still get through and can mess with the execution of
the rest of your sub-tests and tests.

    Usage: >

        call UltiAssertInOutput(desc, fx, arguments, pattern, expectation, skip)


'desc' == string description of the sub-test's purpose.

'filename' == the path to the file you wish to search through.

'fx' == the string name of the function you wish to test. Do not include the
    parentheses.

'arguments' == an explicit list of the arguments you wish to pass to fx. If no
    arguments are needed, you must still supply an empty list.

'pattern' == a substring or vim regex that matches the exception you are
    checking for. If you want it to check if it throws an exception at all,
    make this an empty string ''.

'expectation' == either the string 'true' or 'false' to indicate whether you
    the Assertion to be true or false.

'skip' == an optional argument that can be nothing, or the string 'skip' to.
    indicate you don't wish to evaluate that test currently.

    Examples: >

        " Assume HelloPerson() is a function that accepts zero, one or two
        " arguments and echos 'Hello [names]', but throws an error when given
        " more than 3 arguments, or if any of the arguments aren't strings.
        call UltiAssertException('Test throws error for 3 people',
                    \ 'HelloPerson', ['Kevin', 'Jeff', 'Danielle'],
                    \ 'Given too many arguments', 'true')
        call UltiAssertInOutput("Test that number's aren't allowed',
                    \ 'HelloPerson', [2, 3], 'Improper argument', 'true')
        call UltiAssertInOutput('Test that normal execution is fine',
                    \ 'HelloPerson', ['Kevin'], '', 'false')

------------------------------------------------------------------------------
4d. Example Functions

These are included functions that you can run out of the box to see what the
output of the testing suite is like. And, more importantly, to verify that
this plugin is installed, configured, and written correctly.

------------------------------------------------------------------------------
4d.1 UltiTestSelfUnit             *UltiTestSelfUnit*

This function takes no arguments and runs all the unit tests written for this
plugin. If you've been running your other tests before this, please call
|UltiTestResetAll| before calling this.

    Usage: >

        :call UltiTestSelfUnit()
------------------------------------------------------------------------------
4d.2 UltiTestExampleUnit          *UltiTestExampleUnit*

This function takes no arguments and runs several different example tests than
the ones shown here. If you've been running your other tests before this,
please call |UltiTestResetAll| before calling this. These tests are more
experimental on my part and should only be run if you're curious and bored.

    Usage: >

        :call UltiTestExampleUnit()


==============================================================================
5. Configuration                      *Ultimate-Test-Utility-Config*

Configuration is quite simple. Once the plugin is installed, see the README
for instructions, the default configuration is enough to get you started.
Right now, there is only one global variable introduced, |g:ulti_test_verbose|.


                                       *g:ulti_test_verbose*
g:ulti_test_verbose~

Default: 1

Overview:

    This setting controls the level of reporting done while tests are
    executed.
    You may set this in your '.vimrc' or '_vimrc' and/or you can set it to
    your liking before running individual tests.
    
    When set to 2, you are notified when tests are started and stopped.
    Additionally, each sub-test gets a oneline description as it executes with
    a report on its success. When calling |UltiTestReport|, brief subtests
    statistics and a one-line pass or fail notification is issued.

    When set to 1, you are not notified when tests are started and stopped.
    Additionally, only failed subtests get a line report. The behavior when
    calling |UltiTestReport| is the same as when set to 2.

    When set to 0, you are not notified when tests are started and stopped.
    Additionally, only failed subtests get a line report. Also, when calling
    |UltiTestReport| only tests with one or more failed subtest will actually
    be reported. This way you can change the level of reporting with just one
    variable without removing calls to |UltiTestReport|.

Usage:

    You can test the various levels of reporting with tests in
    |UltiTestSelfUnit|. >

    :let g:ulti_test_verbose = 2
    :call UltiTestSelfUnit()

    :let g:ulti_test_verbose = 1
    :call UltiTestSelfUnit()

    :let g:ulti_test_verbose = 0
    :call UltiTestSelfUnit()

==============================================================================
/* vim: set ft=help: */
